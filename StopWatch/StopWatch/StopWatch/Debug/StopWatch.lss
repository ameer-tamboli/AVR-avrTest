
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000027c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000996  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043d  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000137  00000000  00000000  00001ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  ac:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <delay>:
	unsigned int i;
	TCNT1=0x0010;
	TCCR1A=0x00;
	TCCR1B=0x05;				//no prescale
	
	for(i=0;i<x;i++)
  b4:	25 ef       	ldi	r18, 0xF5	; 245
  b6:	32 ec       	ldi	r19, 0xC2	; 194
  b8:	3d bd       	out	0x2d, r19	; 45
  ba:	2c bd       	out	0x2c, r18	; 44
  bc:	1f bc       	out	0x2f, r1	; 47
  be:	25 e0       	ldi	r18, 0x05	; 5
  c0:	2e bd       	out	0x2e, r18	; 46
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	81 f0       	breq	.+32     	; 0xe6 <delay+0x32>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	65 ef       	ldi	r22, 0xF5	; 245
  cc:	72 ec       	ldi	r23, 0xC2	; 194
  ce:	44 e0       	ldi	r20, 0x04	; 4
  d0:	06 b6       	in	r0, 0x36	; 54
  d2:	02 fe       	sbrs	r0, 2
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <delay+0x1c>
  d6:	7d bd       	out	0x2d, r23	; 45
  d8:	6c bd       	out	0x2c, r22	; 44
  da:	46 bf       	out	0x36, r20	; 54
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	82 17       	cp	r24, r18
  e2:	93 07       	cpc	r25, r19
  e4:	a9 f7       	brne	.-22     	; 0xd0 <delay+0x1c>
  e6:	08 95       	ret

000000e8 <delay_ms>:
  e8:	20 e8       	ldi	r18, 0x80	; 128
  ea:	31 ec       	ldi	r19, 0xC1	; 193
  ec:	3d bd       	out	0x2d, r19	; 45
  ee:	2c bd       	out	0x2c, r18	; 44
  f0:	1f bc       	out	0x2f, r1	; 47
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	2e bd       	out	0x2e, r18	; 46
  f6:	00 97       	sbiw	r24, 0x00	; 0
  f8:	81 f0       	breq	.+32     	; 0x11a <delay_ms+0x32>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	60 e8       	ldi	r22, 0x80	; 128
 100:	71 ec       	ldi	r23, 0xC1	; 193
 102:	44 e0       	ldi	r20, 0x04	; 4
 104:	06 b6       	in	r0, 0x36	; 54
 106:	02 fe       	sbrs	r0, 2
 108:	fd cf       	rjmp	.-6      	; 0x104 <delay_ms+0x1c>
 10a:	7d bd       	out	0x2d, r23	; 45
 10c:	6c bd       	out	0x2c, r22	; 44
 10e:	46 bf       	out	0x36, r20	; 54
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	82 17       	cp	r24, r18
 116:	93 07       	cpc	r25, r19
 118:	a9 f7       	brne	.-22     	; 0x104 <delay_ms+0x1c>
 11a:	08 95       	ret

0000011c <Switch_6>:
		}
	}
}*/
void Switch_6(void)
{
	SDDRD=0x00;
 11c:	11 ba       	out	0x11, r1	; 17
	SPORTD=0xff;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	82 bb       	out	0x12, r24	; 18
	if((PIND&0x40)==0)
 122:	86 99       	sbic	0x10, 6	; 16
 124:	18 c0       	rjmp	.+48     	; 0x156 <Switch_6+0x3a>
	{
		delay_ms(10);
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 74 00 	call	0xe8	; 0xe8 <delay_ms>
		if((PIND&0x40)==0)
 12e:	86 99       	sbic	0x10, 6	; 16
 130:	12 c0       	rjmp	.+36     	; 0x156 <Switch_6+0x3a>
		{
			TCCR1B=0x00;
 132:	1e bc       	out	0x2e, r1	; 46
			TIMSK=0x00;
 134:	17 be       	out	0x37, r1	; 55
			cli();
 136:	f8 94       	cli
			PORTC=0x0f;
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	85 bb       	out	0x15, r24	; 21
			delay(1);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay>
			PORTC=0xFf;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	85 bb       	out	0x15, r24	; 21
			delay(1);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay>
			TCCR1B=0x05;
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	8e bd       	out	0x2e, r24	; 46
			sei();
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <__vector_14>:
		Switch_6();
    }
}

ISR(TIMER1_OVF_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	cli();
 17a:	f8 94       	cli
	count++;
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 180:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTC=~PORTC ;
 18e:	85 b3       	in	r24, 0x15	; 21
 190:	80 95       	com	r24
 192:	85 bb       	out	0x15, r24	; 21
	TCNT1=0xC2F5;
 194:	85 ef       	ldi	r24, 0xF5	; 245
 196:	92 ec       	ldi	r25, 0xC2	; 194
 198:	9d bd       	out	0x2d, r25	; 45
 19a:	8c bd       	out	0x2c, r24	; 44
	TCCR1B=0x05;
 19c:	85 e0       	ldi	r24, 0x05	; 5
 19e:	8e bd       	out	0x2e, r24	; 46
/*	if(count==10)
	{
		TCCR1B=0x00;
		TIMSK=0x00;
	}*/
	Switch_6();
 1a0:	0e 94 8e 00 	call	0x11c	; 0x11c <Switch_6>
	
	//PORTC|=(1<<TOV1);
	sei();
 1a4:	78 94       	sei
	
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <Switch_7>:
	}
}

void Switch_7(void)
{
	DDRD=0x00;
 1c8:	11 ba       	out	0x11, r1	; 17
	PORTD=0xff;
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	82 bb       	out	0x12, r24	; 18
	if((PIND&0x80)==0)
 1ce:	87 99       	sbic	0x10, 7	; 16
 1d0:	0f c0       	rjmp	.+30     	; 0x1f0 <Switch_7+0x28>
	{
		delay_ms(10);
 1d2:	8a e0       	ldi	r24, 0x0A	; 10
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 74 00 	call	0xe8	; 0xe8 <delay_ms>
		if((PIND&0x80)==0)
 1da:	87 99       	sbic	0x10, 7	; 16
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <Switch_7+0x28>
		{
			TCCR1B=0x05;
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	8e bd       	out	0x2e, r24	; 46
			TCNT1=0xC2F5;
 1e2:	85 ef       	ldi	r24, 0xF5	; 245
 1e4:	92 ec       	ldi	r25, 0xC2	; 194
 1e6:	9d bd       	out	0x2d, r25	; 45
 1e8:	8c bd       	out	0x2c, r24	; 44
			TIMSK=0x04;
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	87 bf       	out	0x37, r24	; 55
			sei();
 1ee:	78 94       	sei
 1f0:	08 95       	ret

000001f2 <main>:
unsigned int count;

int main(void)
{
    /* Replace with your application code */
	DDRC=0xff;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	84 bb       	out	0x14, r24	; 20
	PORTC=0xff;
 1f6:	85 bb       	out	0x15, r24	; 21

	/*TCCR1B=0x05;
	TCNT1=0xc2f5;
	TIMSK=0x04;*/
	sei();
 1f8:	78 94       	sei
    while (1) 
    {
		//stopWatch();
		//PORTC=~PORTC;
		//delay(1);
		Switch_7();
 1fa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Switch_7>
		Switch_6();
 1fe:	0e 94 8e 00 	call	0x11c	; 0x11c <Switch_6>
 202:	fb cf       	rjmp	.-10     	; 0x1fa <main+0x8>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
